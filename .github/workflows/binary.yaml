name: "Experimental binaries"

on:
  workflow_dispatch:

jobs:
  binary:
    name: Create the artifact
    permissions:
      id-token: write
      attestations: write
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            name: x86_64-apple-darwin
            installable: .#dune-experimental
          - os: macos-14
            name: aarch64-apple-darwin
            installable: .#dune-experimental
          - os: ubuntu-22.04
            name: x86_64-unknown-linux-musl
            installable: .#dune-static-experimental
    runs-on: ${{ matrix.os }}
    outputs:
      git-commit: ${{ steps.git-commit.outputs.hash }}
    steps:
      - name: Set DATE environment variable
        run: echo "DATE=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"

      - name: Set archive environment variables
        run: |
          echo "ARCHIVE_DIR=dune-$DATE-${{ matrix.name }}" >> $GITHUB_ENV
          echo "ARCHIVE_TAR=dune-$DATE-${{ matrix.name }}.tar" >> $GITHUB_ENV
          echo "ARCHIVE_TARGZ=dune-$DATE-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: tarides/dune
          ref: experimental
          fetch-depth: 0 # for git describe

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: dune-binary-distribution

      - uses: cachix/install-nix-action@v22

      - name: Extract build informations
        id: git-commit
        run: echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Export version
        run: |
          echo "(version \"Dune Tarides Experimental: build $(date -u +"%Y-%m-%dT%H:%M:%SZ"), git revision $(git rev-parse HEAD)\")" >> dune-project

      - run: nix build ${{ matrix.installable }}

      - name: Extract artifact and attestation
        run: |
          mkdir -p ~/build/$ARCHIVE_DIR/
          cp result/bin/dune ~/build/$ARCHIVE_DIR
          cp -r $GITHUB_WORKSPACE/dune-binary-distribution/env ~/build/$ARCHIVE_DIR
          cp -r $GITHUB_WORKSPACE/dune-binary-distribution/completions ~/build/$ARCHIVE_DIR
          cp -r $GITHUB_WORKSPACE/dune-binary-distribution/tool-wrappers ~/build/$ARCHIVE_DIR
          tar --format=posix -cvf ~/build/$ARCHIVE_TAR -C ~/build $ARCHIVE_DIR
          gzip -9 ~/build/$ARCHIVE_TAR
          rm -rf ~/build/$ARCHIVE_DIR

      - uses: actions/upload-artifact@v4
        with:
          path: ~/build
          name: ${{ matrix.name }}

  deploy-s3:
    runs-on: ubuntu-latest
    needs: binary
    permissions:
      contents: write
    steps:
      - name: Install rclone
        run: |
          sudo -v ; curl https://rclone.org/install.sh | sudo bash

      # - name: Prepare SSH env
      #   shell: bash
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "$SSH_PRIVATE_KEY" > ~/.ssh/tarides
      #     echo "$SSH_PUBLIC_KEY" > ~/.ssh/tarides.pub
      #     chmod 600 ~/.ssh/tarides
      #     chmod 600 ~/.ssh/tarides.pub
      #     ssh-keyscan -H "$DEPLOY_SERVER" >> ~/.ssh/known_hosts
      #   env:
      #     DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup OCaml with cache
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: "5.2"
          dune-cache: true

      - name: Install Sandworm deps && build
        run: opam install -y . --deps-only && opam exec -- dune build

      - uses: actions/download-artifact@v4
        with:
          path: /home/runner/artifacts

      - name: Move artifacts to scope
        run: mv "/home/runner/artifacts" "."

      # - name: Export Rclone configuration
      #   run: echo "${{ secrets.RCLONE_CONF }}" >> rclone.conf

      - name: Export executables and generate html
        shell: bash
        # run: opam exec -- dune exec sandworm -- sync --commit "${{ needs.binary.outputs.git-commit }}"
        run: opam exec -- dune exec sandworm -- --help

      - name: Commit changes to branch
        run: |
          git config --global user.name 'Experimental generator'
          git config --global user.email 'dune-experimental@users.noreply.github.com'
          git switch docs
          (git add metadata.json && \
          git commit -m "Experimental build $(date +'%Y-%m-%d')" && \
          git push) || echo "No new data" # Prevent from committing empty stuff
